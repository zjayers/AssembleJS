AWSTemplateFormatVersion: '2010-09-09'
Description: 'AssembleJS Application Deployment on AWS - Generated by RIVET'

Parameters:
  EnvironmentName:
    Description: Environment name (e.g., dev, staging, prod)
    Type: String
    Default: dev
    
  DomainName:
    Description: Domain name for the application
    Type: String
    Default: example.com

Resources:
  # S3 Bucket for hosting static assets
  ApplicationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-{{projectName}}-${AWS::AccountId}"
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - !Sub "https://${DomainName}"
            MaxAge: 3600
            
  # Bucket policy to allow CloudFront access
  ApplicationBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ApplicationBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub "${ApplicationBucket.Arn}/*"
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${ApplicationCloudFront}"
                
  # CloudFront distribution
  ApplicationCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        Origins:
          - DomainName: !GetAtt ApplicationBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            
  # Origin access control for CloudFront
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${EnvironmentName}-{{projectName}}-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        
{{#if (eq configLevel "advanced")}}
  # Lambda function for server-side rendering
  ApplicationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-{{projectName}}"
      Runtime: nodejs18.x
      Handler: dist/server.handler
      Code:
        S3Bucket: !Ref ApplicationBucket
        S3Key: lambda-deployment.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: production
          
  # API Gateway for the Lambda function
  ApplicationAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${EnvironmentName}-{{projectName}}-api"
      Description: API for AssembleJS application
      
  # API Gateway proxy resource to handle all paths
  ApplicationAPIProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApplicationAPI
      ParentId: !GetAtt ApplicationAPI.RootResourceId
      PathPart: "{proxy+}"
      
  # API Gateway method for proxying requests to Lambda
  ApplicationAPIProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApplicationAPI
      ResourceId: !Ref ApplicationAPIProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApplicationFunction.Arn}/invocations"
        
  # API Gateway deployment
  ApplicationAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApplicationAPIProxyMethod
    Properties:
      RestApiId: !Ref ApplicationAPI
      StageName: !Ref EnvironmentName
      
  # Lambda permission for API Gateway
  ApplicationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ApplicationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApplicationAPI}/*/*"
      
  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
{{/if}}

Outputs:
  BucketName:
    Description: S3 Bucket for application assets
    Value: !Ref ApplicationBucket
    
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref ApplicationCloudFront
    
  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt ApplicationCloudFront.DomainName
    
{{#if (eq configLevel "advanced")}}
  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApplicationAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}/"
    
  LambdaFunction:
    Description: Lambda function name
    Value: !Ref ApplicationFunction
{{/if}}