# AssembleJS Dockerfile - Multi-stage build
# Generated by RIVET - AssembleJS Enterprise Deployment System

# Build stage
FROM node:{{nodeVersion}}-alpine AS builder
WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm ci

# Copy source and build the application
COPY . .
RUN npm run build

# Production stage
FROM node:{{nodeVersion}}-alpine AS production
WORKDIR /app

# Set environment variables
ENV NODE_ENV=production

# Copy built application
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./

# Install production dependencies only
RUN npm ci --omit=dev

# Install health check dependencies
RUN apk add --no-cache wget

# Port configuration
EXPOSE {{projectPort}}

# Health check
HEALTHCHECK --interval=30s --timeout=3s CMD wget -qO- http://localhost:{{projectPort}}/health || exit 1

# Use a non-root user
USER node

# Create required directories with proper permissions
RUN mkdir -p /app/uploads /app/logs /app/cache && chown -R node:node /app

# Start the application
CMD ["node", "dist/server.js"]