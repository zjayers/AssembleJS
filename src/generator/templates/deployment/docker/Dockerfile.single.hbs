# AssembleJS Dockerfile (Single-Stage Build)
# Generated by RIVET - AssembleJS Enterprise Deployment System
# 
# This Dockerfile creates a single-stage build for development or simpler deployments.
# For production, consider using the multi-stage Dockerfile for smaller image size.
#
# Features:
# - Uses Node.js {{nodeVersion}} Alpine for a smaller footprint
# - Proper security practices (non-root user, minimal dependencies)
# - Built-in health check for container orchestration
# - Production-ready environment configuration

# Base image with pinned version for reproducibility
FROM node:{{nodeVersion}}-alpine
WORKDIR /app

# Set environment variables
# NODE_ENV=production optimizes Node.js for production (disables development features)
ENV NODE_ENV=production
# You can add additional environment variables as needed
# ENV ASSEMBLEJS_LOG_LEVEL=info

# Copy package files and install dependencies
# This is done before copying the rest of the code to leverage Docker layer caching
COPY package*.json ./
# Use npm ci for reliable, reproducible builds (uses package-lock.json)
RUN npm ci

# Copy source files and build the application
COPY . .
RUN npm run build

# Install minimal dependencies required for health checks
RUN apk add --no-cache wget

# Port configuration - the port your application listens on
EXPOSE {{projectPort}}

# Health check configuration
# This helps container orchestrators know if your application is healthy
# Adjust the interval and timeout as needed for your application
HEALTHCHECK --interval=30s --timeout=3s CMD wget -qO- http://localhost:{{projectPort}}/health || exit 1

# Security: Use a non-root user for running the application
USER node

# Create required directories with proper permissions
# These directories are commonly used by AssembleJS applications
RUN mkdir -p /app/uploads /app/logs /app/cache && chown -R node:node /app

# Start the application
# Using array syntax ensures proper signal handling
CMD ["node", "dist/server.js"]

# Additional configuration options (uncomment as needed):
# 
# # Set a specific timezone
# # RUN apk add --no-cache tzdata && cp /usr/share/zoneinfo/America/New_York /etc/localtime
# 
# # Add labels for better maintainability
# # LABEL maintainer="Your Name <your.email@example.com>"
# # LABEL version="1.0.0"
# # LABEL description="AssembleJS application"
# 
# # Configure Node.js memory limits
# # ENV NODE_OPTIONS="--max-old-space-size=2048"