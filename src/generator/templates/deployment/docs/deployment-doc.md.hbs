# AssembleJS Deployment Guide This document provides comprehensive instructions
for deploying your AssembleJS application using
{{target}}. These deployment configurations were generated by RIVET, the
AssembleJS Enterprise Deployment System. ## Overview AssembleJS applications can
be deployed to various platforms depending on your requirements. This project
has been configured specifically for **{{target}}** deployment. ### What's
Included - Production-ready configuration for
{{target}}
- Performance optimizations - Security best practices - Automated deployment
workflows ## Quick Start For the fastest way to deploy your application, run:
```bash # Build and deploy in one command npm run deploy ``` ### Deployment
Dashboard After deployment, you can monitor your application status at: ```
https://rivet.assemblejs.com/dashboard/{{projectName}}
```

{{#if (eq target "docker")}}
  ## Docker Deployment ### Prerequisites - Docker
  {{#if (eq dockerConfig "compose")}}and Docker Compose {{/if}}installed ###
  Docker Commands

  {{#if (eq dockerConfig "single")}}
    #### Build the Docker Image ```bash npm run deploy:build # or directly with
    Docker docker build -t
    {{projectName}}
    . ``` #### Run the Container ```bash docker run -p
    {{projectPort}}:{{projectPort}}
    {{projectName}}
    ```
  {{/if}}

  {{#if (eq dockerConfig "multi-stage")}}
    #### Build the Optimized Docker Image ```bash npm run deploy:build # or
    directly with Docker docker build -t
    {{projectName}}
    . ``` #### Run the Container ```bash docker run -p
    {{projectPort}}:{{projectPort}}
    {{projectName}}
    ```
  {{/if}}

  {{#if (eq dockerConfig "compose")}}
    #### Start All Services ```bash npm run deploy # or directly with Docker
    Compose docker-compose up -d ``` #### Stop All Services ```bash npm run
    deploy:down # or directly with Docker Compose docker-compose down ```

    {{#if includeDatabase}}
      ### Database Information This deployment includes a
      {{databaseType}}
      database container. Default credentials: - Username: `assemblejs` -
      Password: `assemblejs_password` (change this in production!) - Database:
      `assemblejs_db` The database is accessible to the application at `{{databaseType}}:{{#if
        (eq databaseType "postgres")
      }}5432{{/if}}{{#if (eq databaseType "mysql")}}3306{{/if}}{{#if
        (eq databaseType "mongodb")
      }}27017{{/if}}`.
    {{/if}}
  {{/if}}

  {{#if useNginx}}
    ### Nginx Configuration Nginx is configured as a reverse proxy. To
    customize: 1. Edit the configuration at `deploy/nginx/nginx.conf` 2. For
    production use with SSL, uncomment the SSL section and configure
    certificates SSL certificates should be placed in `deploy/nginx/ssl/`: -
    `certificate.crt`: Your SSL certificate - `private.key`: Your private key
  {{/if}}
{{/if}}

{{#if (eq target "aws")}}
  ## AWS Deployment ### Prerequisites - AWS CLI installed and configured - S3
  bucket for hosting - CloudFront distribution (optional but recommended) ###
  Deployment Steps 1. Set environment variables: ``` export
  AWS_S3_BUCKET=your-bucket-name export
  AWS_CLOUDFRONT_DISTRIBUTION_ID=your-distribution-id ``` 2. Deploy to S3:
  ```bash npm run deploy ``` 3. Invalidate CloudFront cache: ```bash npm run
  deploy:invalidate ```
{{/if}}

{{#if (eq target "netlify")}}
  ## Netlify Deployment ### Prerequisites - Netlify CLI installed (`npm install
  -g netlify-cli`) - Netlify account ### Deployment Steps 1. Log in to Netlify:
  ```bash netlify login ``` 2. Deploy to preview URL: ```bash npm run deploy ```
  3. Deploy to production URL: ```bash npm run deploy:prod ```
{{/if}}

{{#if (eq cicd "github")}}
  ## CI/CD Configuration This project includes a GitHub Actions workflow in
  `.github/workflows/deploy.yml` that automatically: 1. Builds and tests the
  application on push to main 2. Deploys to
  {{target}}
  when tests pass ### Required Secrets

  {{#if (eq target "docker")}}
    - `DOCKER_USERNAME`: Your Docker Hub username - `DOCKER_PASSWORD`: Your
    Docker Hub password
  {{/if}}
  {{#if (eq target "aws")}}
    - `AWS_ACCESS_KEY_ID`: AWS access key - `AWS_SECRET_ACCESS_KEY`: AWS secret
    key - `AWS_REGION`: AWS region - `AWS_S3_BUCKET`: S3 bucket name -
    `AWS_CLOUDFRONT_DISTRIBUTION_ID`: CloudFront distribution ID
  {{/if}}
  {{#if (eq target "netlify")}}
    - `NETLIFY_AUTH_TOKEN`: Netlify authentication token - `NETLIFY_SITE_ID`:
    Netlify site ID
  {{/if}}
{{/if}}

## Environment Variables Create a `.env` file in the project root with the
following variables: ``` NODE_ENV=production PORT={{projectPort}}
```

{{#if (eq target "docker")}}
  For Docker deployment, these variables are already configured in the
  Dockerfile and/or docker-compose.yml.
{{/if}}

## Help and Documentation For comprehensive documentation on AssembleJS
deployment, visit:
[assemblejs.com/developer/deployment](https://assemblejs.com/developer/deployment)
--- *Generated by RIVET - AssembleJS Enterprise Deployment System*