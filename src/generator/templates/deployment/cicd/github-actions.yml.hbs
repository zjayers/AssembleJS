# AssembleJS GitHub Actions Workflow
# Generated by RIVET - AssembleJS Enterprise Deployment System
#
# This workflow handles CI/CD for your AssembleJS application:
# 1. Builds and tests the application
# 2. Deploys to your configured target (Docker, AWS, Netlify, etc.)
#
# You'll need to set up the appropriate secrets in your GitHub repository settings.
# See https://assemblejs.com/docs/deployment for detailed instructions.

name: Deploy AssembleJS Application

# Define when this workflow will run
on:
  # Run on push to main branch
  push:
    branches: [ main ]
  # Run on PRs targeting main
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:

# Environment variables used across jobs
env:
  NODE_VERSION: "{{nodeVersion}}"
  APP_NAME: "{{projectName}}"

jobs:
  # Build and test the application
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Node.js environment
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'  # Caches npm dependencies for faster builds
      
      # Install dependencies using clean install
      - name: Install dependencies
        run: npm ci
      
      # Lint the code to ensure quality
      - name: Lint code
        run: npm run lint
      
      # Run tests if available
      - name: Run tests
        run: npm test
        # Continue even if tests fail
        continue-on-error: true
      
      # Build the application for production
      - name: Build application
        run: npm run build
      
      # Conditional step for advanced monitoring
      {{#if (eq monitoring "advanced")}}
      - name: Run performance analysis
        run: npm run insights
        # This won't fail the workflow if it doesn't complete
        continue-on-error: true
      {{/if}}
      
      # Upload build artifacts for use in other jobs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          # Keep artifacts for 3 days
          retention-days: 3
  
  # Docker deployment job - only runs if target is Docker
  {{#if (eq target "docker")}}
  build-and-push-docker:
    name: Build and Push Docker Image
    needs: build-and-test  # Only run after build-and-test succeeds
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Docker Buildx for efficient builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Log in to Docker registry
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Extract metadata for Docker
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long
      
      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Add cache for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
  {{/if}}
  
  # AWS deployment job - only runs if target is AWS
  {{#if (eq target "aws")}}
  deploy-to-aws:
    name: Deploy to AWS
    needs: build-and-test  # Only run after build-and-test succeeds
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Download the built artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      
      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # Deploy to AWS S3 and invalidate CloudFront cache
      - name: Deploy to AWS
        run: |
          echo "Deploying to S3 bucket: ${{ secrets.AWS_S3_BUCKET }}"
          aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET }}/ --delete
          
          echo "Invalidating CloudFront distribution: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          
          echo "Deployment complete!"
  {{/if}}
  
  # Netlify deployment job - only runs if target is Netlify
  {{#if (eq target "netlify")}}
  deploy-to-netlify:
    name: Deploy to Netlify
    needs: build-and-test  # Only run after build-and-test succeeds
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Download the built artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      
      # Deploy to Netlify
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          # Enable these options as needed
          # enable-pull-request-comment: true
          # enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 2
  {{/if}}
  
  # Add notification job to report deployment status
  notify:
    name: Notify Deployment Status
    needs: [build-and-test{{#if (eq target "docker")}}, build-and-push-docker{{/if}}{{#if (eq target "aws")}}, deploy-to-aws{{/if}}{{#if (eq target "netlify")}}, deploy-to-netlify{{/if}}]
    runs-on: ubuntu-latest
    # Always run this job, even if previous jobs fail
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          echo "Deployment workflow completed with status: ${{ job.status }}"
          echo "Visit your deployment at: https://{{projectName}}.example.com"
          
          # Uncomment to enable Slack notifications
          # curl -X POST -H 'Content-type: application/json' \
          # --data '{"text":"Deployment of {{projectName}} ${{ job.status }}"}' \
          # ${{ secrets.SLACK_WEBHOOK_URL }}