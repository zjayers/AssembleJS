# AssembleJS GitLab CI Configuration
# Generated by RIVET - AssembleJS Enterprise Deployment System

stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: node:{{nodeVersion}}-alpine
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/

test:
  stage: test
  image: node:{{nodeVersion}}-alpine
  script:
    - npm ci
    - npm run lint
{{#if (eq monitoring "advanced")}}
    - npm run insights || true
{{/if}}

deploy:
  stage: deploy
  image: {{#if (eq target "docker")}}docker:20.10.16{{else}}node:{{nodeVersion}}-alpine{{/if}}
{{#if (eq target "docker")}}
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
{{/if}}
  script:
{{#if (eq target "docker")}}
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker build -t $DOCKER_USERNAME/{{projectName}}:latest .
    - docker push $DOCKER_USERNAME/{{projectName}}:latest
{{else if (eq target "aws")}}
    - npm ci
    - npm i -g aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - aws s3 sync dist/ s3://$AWS_S3_BUCKET/ --delete
    - aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
{{else if (eq target "netlify")}}
    - npm ci
    - npm i -g netlify-cli
    - netlify deploy --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --prod
{{else if (eq target "vercel")}}
    - npm ci
    - npm i -g vercel
    - vercel --token $VERCEL_TOKEN --prod
{{else}}
    - echo "Custom deployment script goes here"
{{/if}}
  only:
    - main