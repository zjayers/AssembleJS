// AssembleJS Jenkinsfile // Generated by RIVET - AssembleJS Enterprise
Deployment System pipeline { agent { docker { image 'node:{{nodeVersion}}-alpine'
} } stages { stage('Build') { steps { sh 'npm ci' sh 'npm run build' } }
stage('Test') { steps { sh 'npm run lint'
{{#if (eq monitoring "advanced")}}
  sh 'npm run insights || true'
{{/if}}
} } stage('Deploy') { when { branch 'main' } steps {
{{#if (eq target "docker")}}
  withCredentials([string(credentialsId: 'docker-username', variable:
  'DOCKER_USERNAME'), string(credentialsId: 'docker-password', variable:
  'DOCKER_PASSWORD')]) { sh 'docker login -u $DOCKER_USERNAME -p
  $DOCKER_PASSWORD' sh 'docker build -t $DOCKER_USERNAME/{{projectName}}:latest
  .' sh 'docker push $DOCKER_USERNAME/{{projectName}}:latest' }
{{else if (eq target "aws")}}
  withCredentials([string(credentialsId: 'aws-access-key', variable:
  'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable:
  'AWS_SECRET_ACCESS_KEY'), string(credentialsId: 'aws-region', variable:
  'AWS_REGION'), string(credentialsId: 'aws-s3-bucket', variable:
  'AWS_S3_BUCKET'), string(credentialsId: 'aws-cloudfront-id', variable:
  'AWS_CLOUDFRONT_DISTRIBUTION_ID')]) { sh 'npm i -g aws-cli' sh 'aws s3 sync
  dist/ s3://$AWS_S3_BUCKET/ --delete' sh 'aws cloudfront create-invalidation
  --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"' }
{{else if (eq target "netlify")}}
  withCredentials([string(credentialsId: 'netlify-token', variable:
  'NETLIFY_AUTH_TOKEN'), string(credentialsId: 'netlify-site-id', variable:
  'NETLIFY_SITE_ID')]) { sh 'npm i -g netlify-cli' sh 'netlify deploy
  --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --prod' }
{{else if (eq target "vercel")}}
  withCredentials([string(credentialsId: 'vercel-token', variable:
  'VERCEL_TOKEN')]) { sh 'npm i -g vercel' sh 'vercel --token $VERCEL_TOKEN
  --prod' }
{{else}}
  echo 'Custom deployment script goes here'
{{/if}}
} } } post { always { cleanWs() } } }