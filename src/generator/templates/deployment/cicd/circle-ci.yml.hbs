# AssembleJS CircleCI Configuration
# Generated by RIVET - AssembleJS Enterprise Deployment System

version: 2.1

jobs:
  build:
    docker:
      - image: cimg/node:{{nodeVersion}}
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - node_modules

  test:
    docker:
      - image: cimg/node:{{nodeVersion}}
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run: npm run lint
{{#if (eq monitoring "advanced")}}
      - run: npm run insights || true
{{/if}}

  deploy:
    docker:
{{#if (eq target "docker")}}
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - attach_workspace:
          at: .
      - run:
          name: Build and push Docker image
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker build -t $DOCKER_USERNAME/{{projectName}}:latest .
            docker push $DOCKER_USERNAME/{{projectName}}:latest
{{else if (eq target "aws")}}
      - image: cimg/python:3.9
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: pip install awscli
      - run:
          name: Deploy to AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION
            aws s3 sync dist/ s3://$AWS_S3_BUCKET/ --delete
            aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
{{else if (eq target "netlify")}}
      - image: cimg/node:{{nodeVersion}}
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Deploy to Netlify
          command: |
            npm i -g netlify-cli
            netlify deploy --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --prod
{{else if (eq target "vercel")}}
      - image: cimg/node:{{nodeVersion}}
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Deploy to Vercel
          command: |
            npm i -g vercel
            vercel --token $VERCEL_TOKEN --prod
{{else}}
      - image: cimg/node:{{nodeVersion}}
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Custom deployment
          command: echo "Custom deployment script goes here"
{{/if}}

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: main