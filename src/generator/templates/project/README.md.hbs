#
{{name}}

This is an AssembleJS project, providing a modern and efficient way to build
component-based UIs.

<p align="center">
  <img
    src="https://assemblejs.com/logo.png"
    alt="AssembleJS Logo"
    width="300"
  />
</p>

<p align="center">
  <a href="https://assemblejs.com/docs">Documentation</a>
  •
  <a href="https://assemblejs.com/examples">Examples</a>
  •
  <a href="https://assemblejs.com/community">Community</a>
  •
  <a href="https://assemblejs.com/support">Support</a>
</p>

## ✨ Features - 🚀 **High Performance**: Optimized rendering and caching - 🔌
**Component-Based**: Create reusable, encapsulated UI components - 🔄
**Server-Side Rendering**: Excellent SEO and initial load performance - 📱
**Responsive by Default**: Mobile-first design system - 🌐
**Internationalization**: Built-in i18n support - ♿ **Accessibility**: WCAG
compliance tools included - 🧪 **Testing**: Integrated testing framework ## 🚀
Quick Start Follow these simple steps to get your AssembleJS project up and
running: ### Prerequisites - Node.js 18+ - npm 7+ or yarn 1.22+ ### Installation
```bash # Install dependencies npm install # Start the development server npm
run dev ``` Your application will be available at http://localhost:3000 by
default. ### First-Time Setup Guide If this is your first time using AssembleJS,
follow these steps: 1. **Explore the Project Structure**: ``` src/ ├──
blueprints/ # Top-level pages/screens ├── components/ # Reusable components ├──
controllers/ # Backend controllers ├── services/ # Shared services ├──
factories/ # Data transformation logic └── server.ts # Server entry point ``` 2.
**Create Your First Component**: ```bash npm run asm c my-component main html
``` This creates a new component in `src/components/my-component/main/` 3.
**Create Your First Blueprint (Page)**: ```bash npm run asm b my-page home
preact ``` This creates a new page blueprint in `src/blueprints/my-page/home/`
4. **Modify Your Component**: Edit the files in your component directory to
customize its appearance and behavior. 5. **View Your Changes**: With the dev
server running, see your changes at http://localhost:3000 ## 🛠️ Development
Workflow ### Key Commands | Command | Description | |---------|-------------| |
`npm run dev` | Start the development server with hot-reloading | | `npm run
build` | Build for production | | `npm start` | Run the production build | |
`npm run insights` | Run performance analysis with SPECSHEET | | `npm run lint`
| Lint code with REDLINE | | `npm run lint:fix` | Lint and fix code issues | |
`npm run format` | Format code with Prettier | | `npm run deploy` | Deploy using
RIVET (when configured) | | `npm test` | Run tests | ### Component Generation
Generate new components using the shorthand command: ```bash # Format: npm run
asm c [component-name] [view-name] [ui-type] npm run asm c button primary preact
# Available UI types: preact, html, ejs, markdown ``` ### Blueprint Generation
Generate new blueprints (pages) using: ```bash # Format: npm run asm b
[blueprint-name] [view-name] [ui-type] npm run asm b product-page detail preact
``` ### Controller Generation Generate new API controllers using: ```bash #
Format: npm run asm controller [controller-name] npm run asm controller products
``` ### Service Generation Generate new services using: ```bash # Format: npm
run asm service [service-name] npm run asm service authentication ``` ## 🧩
Component Structure Each AssembleJS component consists of: 1. **View File**
(`.view.tsx`, `.view.html`, `.view.ejs`, or `.view.md`) - Defines the
component's appearance 2. **Client File** (`.client.ts`) - Handles client-side
interactions - Manages component lifecycle 3. **Styles File** (`.styles.scss`) -
Contains component-specific styling Example component structure: ``` components/
└── button/ └── primary/ ├── primary.client.ts # Client-side behavior ├──
primary.styles.scss # Component styling └── primary.view.tsx # Component
structure ``` ## 🌐 Internationalization AssembleJS includes built-in
internationalization support: ```typescript // In your component const greeting
= this.i18n.t('greeting', { name: user.name }); // In your controller const
message = this.getLocalizedMessage(req.userLocale, 'welcome', 'Welcome'); ``` To
add translations, create JSON files in a locales directory: ```json //
locales/en-US.json { "greeting": "Hello, {name}!", "welcome": "Welcome to our
site" } ``` ## ♿ Accessibility AssembleJS encourages accessible components by
default: - Use semantic HTML elements - Include proper ARIA attributes - Ensure
keyboard navigation - Support screen readers - Maintain sufficient color
contrast Example: ```html
<button aria-label="Close dialog" class="close-button" onClick="{closeDialog}">
  <span class="sr-only">Close</span>
  <IconX />
</button>
``` ## 🚢 Deployment Deploy your AssembleJS project to various platforms using
RIVET: ```bash # Run interactive deployment configurator npm run deploy ``` ###
Supported Deployment Targets - **Docker**: Container-based deployment with
optional Nginx and database - **AWS**: Deploy to S3/CloudFront or Lambda
functions - **Netlify**: Static/JAMstack deployment with CDN - **Vercel**:
Edge-optimized deployment For detailed deployment information, see the
[AssembleJS Deployment
Documentation](https://assemblejs.com/developer/deployment). ## 🔍
Troubleshooting ### Common Issues - **Component not rendering**: Check browser
console for errors and verify that the component is registered correctly in
server.ts - **Styles not applying**: Ensure your SCSS file is properly linked
and imported - **Server errors**: Check server logs (available in terminal or at
/logs in development) ### Debug Mode Enable debug mode by setting the
environment variable: ``` ASSEMBLEJS_DEBUG=true npm run dev ``` This provides
enhanced logging and debugging tools. ## 📚 Documentation For comprehensive
documentation and tutorials, visit: - [Getting Started
Guide](https://assemblejs.com/docs/getting-started) - [Component API
Reference](https://assemblejs.com/docs/api/components) - [Blueprint API
Reference](https://assemblejs.com/docs/api/blueprints) - [Deployment
Guide](https://assemblejs.com/developer/deployment) - [Enterprise Tools
Documentation](https://assemblejs.com/developer/tools) ## 🤝 Contributing
Contributions are welcome! See [CONTRIBUTING.md](CONTRIBUTING.md) for details.
## 📝 License This project is licensed under the MIT License - see the
[LICENSE](LICENSE) file for details. ## 🙏 Acknowledgements - Created by
[Zachariah Ayers](https://github.com/zjayers) - Inspired by modern component
frameworks - Built with TypeScript, Fastify, and Vite ---

<p align="center">Made with ❤️ by the AssembleJS Team</p>