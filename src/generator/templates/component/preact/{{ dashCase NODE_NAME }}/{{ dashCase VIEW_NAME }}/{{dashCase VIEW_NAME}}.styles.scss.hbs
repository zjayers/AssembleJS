/**
 * Styles for {{ pascalCase NODE_NAME }} {{ pascalCase VIEW_NAME }} Component
 * 
 * This stylesheet includes:
 * - Responsive design with media queries
 * - Accessibility enhancements
 * - Mobile-first approach
 * - Dark mode support
 * - Error state styling
 */

// Base variables
$primary-color: {{> randomColor }};
$text-color: #333;
$error-color: #d32f2f;
$background-color: #ffffff;
$border-radius: 4px;
$transition-speed: 0.3s;

// Breakpoints for responsive design
$breakpoint-xs: 576px;
$breakpoint-sm: 768px;
$breakpoint-md: 992px;
$breakpoint-lg: 1200px;

// Helper mixins for accessibility
@mixin focus-outline {
  outline: 3px solid rgba($primary-color, 0.5);
  outline-offset: 2px;
}

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Base component styles (mobile-first approach)
.{{dashCase NODE_NAME}}-{{dashCase VIEW_NAME}} {
  border: 2px dashed $primary-color;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 1rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
  color: $text-color;
  position: relative;
  transition: all $transition-speed ease;
  max-width: 100%;
  overflow-x: hidden;
  
  // Interactive elements should have visible focus styles
  button, a, [tabindex="0"] {
    &:focus {
      @include focus-outline;
    }
    
    // Remove outline when using mouse (better UX)
    &:focus:not(:focus-visible) {
      outline: none;
    }
  }
  
  // Dark mode support using prefers-color-scheme
  @media (prefers-color-scheme: dark) {
    --text-color: #f0f0f0;
    --background-color: #222;
    color: var(--text-color);
    background-color: var(--background-color);
  }
  
  // Accessible hiding for elements that should be available to screen readers
  .sr-only {
    @include visually-hidden;
  }
  
  // Styling for error states
  &.error {
    border-color: $error-color;
    
    h2, h3 {
      color: $error-color;
    }
    
    .retry-button {
      background-color: $primary-color;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: $border-radius;
      cursor: pointer;
      margin-top: 1rem;
      
      &:hover {
        background-color: darken($primary-color, 10%);
      }
    }
  }
  
  // Loading state styling
  &.loading {
    min-height: 200px;
    
    .loading-indicator {
      position: relative;
      width: 40px;
      height: 40px;
      
      &:after {
        content: "";
        display: block;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        border: 3px solid #f3f3f3;
        border-top-color: $primary-color;
        animation: spin 1s linear infinite;
      }
    }
  }
  
  // Basic responsive adjustments for mobile devices
  &.mobile-device {
    padding: 0.75rem;
    // Increase touch targets for mobile
    button, a, [role="button"] {
      min-height: 44px;
      min-width: 44px;
    }
  }
  
  // Responsive breakpoints - from mobile to larger screens
  // Extra Small Devices
  &.viewport-xs {
    // Styles for extra small screens
    h2 {
      font-size: 1.25rem;
    }
  }
  
  // Small Devices
  @media (min-width: $breakpoint-xs) {
    padding: 1.25rem;
    flex-direction: row;
    
    h2 {
      font-size: 1.5rem;
    }
  }
  
  // Medium Devices
  @media (min-width: $breakpoint-sm) {
    padding: 1.5rem;
    
    h2 {
      font-size: 1.75rem;
    }
  }
  
  // Large Devices
  @media (min-width: $breakpoint-md) {
    padding: 2rem;
    
    h2 {
      font-size: 2rem;
    }
  }
  
  // Extra Large Devices
  @media (min-width: $breakpoint-lg) {
    max-width: 1140px;
    margin: 0 auto;
  }
  
  // Print styles for better printing experience
  @media print {
    border: none;
    padding: 0;
    
    // Hide non-essential elements when printing
    button, [role="button"], .actions {
      display: none;
    }
  }
}

// Animation for loading spinner
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
