name: Deploy AssembleJS Websites

on:
  # Automatic deployment on merge to main
  push:
    branches:
      - main
    paths:
      - 'websites/**'
  
  # Manual trigger for website deployments
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        options:
          - staging
          - production
      specific-website:
        type: string
        description: 'Deploy specific website (leave empty for all)'
        required: false

jobs:
  # Determine which websites to deploy
  determine-websites:
    runs-on: ubuntu-latest
    outputs:
      websites: ${{ steps.find-websites.outputs.websites }}
      changed-websites: ${{ steps.find-changed-websites.outputs.changed-websites }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Find all websites
        id: find-websites
        run: |
          WEBSITES=$(find websites -type f -name "package.json" -not -path "*/node_modules/*" | sed 's/\/package.json$//' | sed 's/^websites\///' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Found websites: $WEBSITES"
          echo "websites=$WEBSITES" >> $GITHUB_OUTPUT
      
      - name: Find changed websites (for push events)
        id: find-changed-websites
        if: github.event_name == 'push'
        run: |
          # For pushed changes, determine which websites were modified
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          
          # Extract website names from changed files
          CHANGED_WEBSITES=$(echo "$CHANGED_FILES" | grep -e "^websites/" | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          
          echo "Changed websites: $CHANGED_WEBSITES"
          echo "changed-websites=$CHANGED_WEBSITES" >> $GITHUB_OUTPUT

  # Trigger deployments based on event and changes
  trigger-deployments:
    needs: determine-websites
    runs-on: ubuntu-latest
    steps:
      - name: Get package version
        id: package-version
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: determine-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PACKAGE_VERSION"
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      
      - name: Trigger deployments for push events
        if: github.event_name == 'push'
        run: |
          CHANGED_WEBSITES='${{ needs.determine-websites.outputs.changed-websites }}'
          VERSION='${{ steps.determine-version.outputs.version }}'
          
          if [ "$CHANGED_WEBSITES" != "[]" ] && [ -n "$CHANGED_WEBSITES" ]; then
            for WEBSITE in $(echo $CHANGED_WEBSITES | jq -r '.[]'); do
              echo "Triggering deployment for website: $WEBSITE (next version)"
              # Use GitHub CLI to trigger the specific workflow
              gh workflow run "deploy-website-$WEBSITE.yml" -f environment=staging -f version=$VERSION
            done
          else
            echo "No websites changed, skipping deployments"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Trigger deployments for manual events
        if: github.event_name == 'workflow_dispatch'
        run: |
          WEBSITES='${{ needs.determine-websites.outputs.websites }}'
          SPECIFIC_WEBSITE='${{ github.event.inputs.specific-website }}'
          ENVIRONMENT='${{ github.event.inputs.environment }}'
          VERSION='${{ steps.determine-version.outputs.version }}'
          
          # If specific website is specified, only deploy that one
          if [ -n "$SPECIFIC_WEBSITE" ]; then
            if echo $WEBSITES | jq -e '.[] | select(. == "'$SPECIFIC_WEBSITE'")' > /dev/null; then
              echo "Triggering deployment for specific website: $SPECIFIC_WEBSITE to $ENVIRONMENT"
              gh workflow run "deploy-website-$SPECIFIC_WEBSITE.yml" -f environment=$ENVIRONMENT -f version=$VERSION
            else
              echo "Error: Website $SPECIFIC_WEBSITE not found or invalid"
              exit 1
            fi
          else
            # Deploy all websites
            for WEBSITE in $(echo $WEBSITES | jq -r '.[]'); do
              echo "Triggering deployment for website: $WEBSITE to $ENVIRONMENT"
              gh workflow run "deploy-website-$WEBSITE.yml" -f environment=$ENVIRONMENT -f version=$VERSION
            done
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}