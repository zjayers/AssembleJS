name: Publish Package to NPM

on:
  # Automatic publishing on merge to main (as @next)
  push:
    branches:
      - main
  
  # Manual trigger for official releases
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        description: 'Release Type'
        required: true
        default: 'patch'
        options:
          - patch
          - minor
          - major
      publish-tag:
        type: choice
        description: 'NPM Tag'
        required: true
        default: 'latest'
        options:
          - latest
          - next
          - beta
          - alpha

jobs:
  # Run on merge to main - for @next releases
  auto-next-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }} # Use PAT with write access
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Set Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Run linting
        run: npm run lint:dry
      
      - name: Analyze commits with semantic-release
        id: semantic-release
        run: |
          # Install semantic-release
          npm install -g semantic-release@^23.0.0
          
          # Run semantic-release in dry-run mode
          semantic-release --dry-run --branches main > semantic-release-output.txt || true
          
          # Extract version information
          NEW_VERSION=$(grep -o "The next release version is [0-9]\+\.[0-9]\+\.[0-9]\+" semantic-release-output.txt | sed 's/The next release version is //')
          LAST_VERSION=$(grep -o "The last release version was [0-9]\+\.[0-9]\+\.[0-9]\+" semantic-release-output.txt | sed 's/The last release version was //')
          
          # Set outputs
          if [ -n "$NEW_VERSION" ]; then
            echo "new_release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "last_release_version=$LAST_VERSION" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Determine version bump type
        id: version-type
        run: |
          # Default to patch
          TYPE="patch"
          
          # Use semantic-release result if available 
          if [[ "${{ steps.semantic-release.outputs.new_release_version }}" != "" ]]; then
            # New version detected by semantic-release
            # Figure out the type based on version difference
            OLD_VERSION="${{ steps.semantic-release.outputs.last_release_version }}"
            NEW_VERSION="${{ steps.semantic-release.outputs.new_release_version }}"
            
            OLD_MAJOR=$(echo $OLD_VERSION | cut -d. -f1)
            OLD_MINOR=$(echo $OLD_VERSION | cut -d. -f2)
            NEW_MAJOR=$(echo $NEW_VERSION | cut -d. -f1)
            NEW_MINOR=$(echo $NEW_VERSION | cut -d. -f2)
            
            if [ "$NEW_MAJOR" -gt "$OLD_MAJOR" ]; then
              TYPE="major"
            elif [ "$NEW_MINOR" -gt "$OLD_MINOR" ]; then
              TYPE="minor"
            else
              TYPE="patch"
            fi
          else
            # Fallback to manual detection
            # Find commit messages since last tag
            COMMITS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~100)..HEAD --pretty=format:"%s")
            
            # Check for feature and breaking changes
            if echo "$COMMITS" | grep -q "^feat\|^feat("; then
              TYPE="minor"
            fi
            
            if echo "$COMMITS" | grep -q "^BREAKING CHANGE\|^feat!"; then
              TYPE="major"
            fi
          fi
          
          echo "bump-type=$TYPE" >> $GITHUB_OUTPUT
      
      - name: Generate auto-changelog
        run: npm run changelog
      
      - name: Update prerelease version
        run: |
          npm version --${{ steps.version-type.outputs.bump-type }} --preid next --no-git-tag-version
          git add package.json CHANGELOG.md
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          git commit -m "chore(release): prepare $CURRENT_VERSION [skip ci]"
      
      - name: Build package
        run: npm run build
      
      - name: Run tests
        run: npm test
      
      - name: Publish to NPM with next tag
        run: npm publish --tag next --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Push version update
        run: git push

  # Run on manual trigger - for official releases
  manual-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }} # Use PAT with write access
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Set Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Generate changelog
        run: npm run changelog
      
      - name: Update version
        id: update-version
        run: |
          # Remove any prerelease suffix if present
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-next\.[0-9]\+//')
          
          # Update version according to input
          npm version --${{ github.event.inputs.release-type }} --new-version $BASE_VERSION --no-git-tag-version
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit the changes
          git add package.json CHANGELOG.md
          git commit -m "chore(release): $NEW_VERSION [skip ci]"
          git tag v$NEW_VERSION
      
      - name: Build package
        run: npm run build
      
      - name: Run tests
        run: npm test
      
      - name: Publish to NPM
        run: npm publish --tag ${{ github.event.inputs.publish-tag }} --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Push version update and tag
        run: |
          git push
          git push --tags
      
      # Use GitHub API directly instead of deprecated action
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.update-version.outputs.version }}
          name: Release v${{ steps.update-version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ github.event.inputs.publish-tag != 'latest' }}
          token: ${{ secrets.GH_PAT }}