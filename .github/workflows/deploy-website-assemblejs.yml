name: Deploy AssembleJS Website

on:
  # Automatic deployment on change to website files or docs
  push:
    branches:
      - main
    paths:
      - 'websites/assemblejs/**'
      - 'docs/**'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        options:
          - staging
          - production

permissions:
  contents: read
  id-token: write # Needed for AWS authentication

jobs:
  deploy-assemblejs-website:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Get package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # For production, remove any prerelease suffix
          if [ "${{ github.event.inputs.environment || 'staging' }}" = "production" ]; then
            CLEAN_VERSION=$(echo $VERSION | sed 's/-next\.[0-9]\+//')
          else
            CLEAN_VERSION=$VERSION
          fi
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
      
      - name: Install main package dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build main package
        run: npm run build
      
      - name: Build assemblejs website
        run: |
          cd websites/assemblejs
          npm ci
          npm run build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      
      - name: Deploy to S3
        run: |
          # Use www.assemblejs.com as the bucket name
          S3_BUCKET="www.assemblejs.com"
          
          # Determine environment (from input or default to staging)
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          VERSION="${{ steps.package-version.outputs.version }}"
          CLEAN_VERSION="${{ steps.package-version.outputs.clean_version }}"
          
          # Set deployment path based on environment
          if [ "$ENVIRONMENT" = "production" ]; then
            # For production, deploy to the version path and to the root
            DEPLOY_PATH="v$CLEAN_VERSION"
            
            # Deploy to version-specific path
            echo "Deploying to s3://$S3_BUCKET/$DEPLOY_PATH/"
            aws s3 sync "websites/assemblejs/dist/" "s3://$S3_BUCKET/$DEPLOY_PATH/" --delete
            
            # Deploy to root of bucket
            echo "Deploying to s3://$S3_BUCKET/"
            aws s3 sync "websites/assemblejs/dist/" "s3://$S3_BUCKET/" --delete
          else
            # For staging, use 'next' path
            echo "Deploying to s3://$S3_BUCKET/next/"
            aws s3 sync "websites/assemblejs/dist/" "s3://$S3_BUCKET/next/" --delete
          fi
          
          echo "ðŸš€ AssembleJS website successfully deployed to $ENVIRONMENT environment"
      
      - name: Create CloudFront invalidation if configured
        if: vars.ASSEMBLEJS_CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          # Determine environment
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          CLEAN_VERSION="${{ steps.package-version.outputs.clean_version }}"
          
          # Create invalidation paths based on environment
          if [ "$ENVIRONMENT" = "production" ]; then
            INVALIDATION_PATHS="/v$CLEAN_VERSION/* /*"
          else
            INVALIDATION_PATHS="/next/*"
          fi
          
          # Create the invalidation
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.ASSEMBLEJS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths $INVALIDATION_PATHS