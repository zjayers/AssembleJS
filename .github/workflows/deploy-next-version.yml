name: deploy_next_version

on:
  push:
    branches:
      - next
    # Prevent build on workflow changes to avoid accidental releases
    paths-ignore:
      - '.github/workflows/**'
  
  # Manual trigger
  workflow_dispatch:

permissions:
  contents: read
  packages: write

# Define reusable cache key
env:
  cache-key: build-artifacts-${{ github.sha }}

jobs:
  # Primary build job that constructs all artifacts
  build:
    name: Build Next Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci --include=dev
      
      - name: Install website dependencies
        run: cd websites/www.assemblejs.com && npm ci
      
      - name: Build main package
        run: npm run build
      
      - name: Build testbed projects
        run: npm run testbed:build
      
      - name: Cache build artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            lib/
            websites/www.assemblejs.com/build/
            testbed/*/dist/
            docs/
          key: ${{ env.cache-key }}
          enableCrossOsArchive: true
  
  # Publish package to npm with next tag
  publish-package:
    name: Publish Package to NPM
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci --include=dev
      
      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            lib/
            websites/www.assemblejs.com/build/
            testbed/*/dist/
            docs/
          key: ${{ env.cache-key }}
          fail-on-cache-miss: true
      
      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --tag next
          echo "Published package to npm with tag: next"
  
  # Deploy website to S3 next bucket
  deploy-website:
    name: Deploy Next Website
    needs: publish-package
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            lib/
            websites/www.assemblejs.com/build/
            testbed/*/dist/
            docs/
          key: ${{ env.cache-key }}
          fail-on-cache-miss: true
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          role-session-name: GithubActionsSession
          role-duration-seconds: 900
          mask-aws-account-id: 'no'
          output-credentials: true
      
      - name: Deploy to S3 next bucket
        run: |
          S3_BUCKET="www.next.assemblejs.com"
          aws s3 sync "websites/www.assemblejs.com/build/" "s3://$S3_BUCKET/" --delete
          echo "üöÄ AssembleJS next website successfully deployed to www.next.assemblejs.com"
  
  # Package and upload testbed projects as container images
  deploy-testbed:
    name: Deploy Testbed Projects
    needs: publish-package
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            lib/
            websites/www.assemblejs.com/build/
            testbed/*/dist/
            docs/
          key: ${{ env.cache-key }}
          fail-on-cache-miss: true
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          role-session-name: GithubActionsSession
          role-duration-seconds: 900
          mask-aws-account-id: 'no'
          output-credentials: true
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Create package and deploy artifacts
        run: |
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          ECR_REPOSITORY_BASE="assemblejs-testbed"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          cd testbed
          for project_dir in assemblejs-*/; do
            project_name="${project_dir%/}"
            
            if [ -d "$project_dir/dist" ]; then
              echo "---------------------------------------------"
              echo "üì¶ Packaging $project_name for deployment"
              
              # Move into project directory
              cd "$project_name"
              
              # Verify Dockerfile exists
              if [ ! -f "Dockerfile" ]; then
                echo "‚ö†Ô∏è Dockerfile not found in $project_name, using shared template"
                # Check if shared Dockerfile exists
                if [ -f "../../../.github/docker/Dockerfile.testbed" ]; then
                  cp "../../../.github/docker/Dockerfile.testbed" "./Dockerfile"
                else
                  echo "::error::Shared Dockerfile template not found at .github/docker/Dockerfile.testbed"
                  echo "::error::Please create the Dockerfile template before deploying"
                  exit 1
                fi
              fi
              
              # Create ECR repository if it doesn't exist
              aws ecr describe-repositories --repository-names "$ECR_REPOSITORY_BASE/$project_name" || \
                aws ecr create-repository --repository-name "$ECR_REPOSITORY_BASE/$project_name"
              
              # Build and push Docker image
              IMAGE_TAG="$ECR_REGISTRY/$ECR_REPOSITORY_BASE/$project_name:next-$TIMESTAMP"
              IMAGE_TAG_LATEST="$ECR_REGISTRY/$ECR_REPOSITORY_BASE/$project_name:next-latest"
              
              echo "üî® Building Docker image for $project_name"
              docker build -t "$IMAGE_TAG" -t "$IMAGE_TAG_LATEST" .
              
              echo "‚¨ÜÔ∏è Pushing Docker image for $project_name"
              docker push "$IMAGE_TAG"
              docker push "$IMAGE_TAG_LATEST"
              
              echo "‚úÖ Successfully deployed $project_name to ECR"
              
              # Move back to testbed directory
              cd ..
            else
              echo "‚ö†Ô∏è No dist directory found for $project_name, skipping"
            fi
          done
          
          echo "üöÄ All testbed projects successfully packaged and deployed to ECR"